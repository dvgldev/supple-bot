import disnake
from disnake.ext import commands
from disnake.ui import Button, View, Modal, TextInput
from sqlalchemy import create_engine, Column, Integer, String, Boolean, DateTime, Enum
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from datetime import datetime, timedelta
import enum

APPLICATION_CHANNEL_ID = 1252946964664815636
RESPONSE_CHANNEL_ID = 1252947041810780201
ROLE_MENTION_ID = 1253059030327234570
APPROVAL_ROLE_ID = 1253289761611972708

Base = declarative_base()

class ApplicationStatus(enum.Enum):
    pending = "pending"
    approved = "approved"
    rejected = "rejected"

class Application(Base):
    __tablename__ = 'applications'
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(Integer)
    user_mention = Column(String)
    name = Column(String)
    age = Column(String)
    reason = Column(String)
    friend = Column(String)
    rules_response = Column(Boolean)
    timestamp = Column(DateTime, default=datetime.utcnow)
    status = Column(Enum(ApplicationStatus), default=ApplicationStatus.pending)

DATABASE_URL = "sqlite:///testbot.db"
engine = create_engine(DATABASE_URL)
Session = sessionmaker(bind=engine)

Base.metadata.create_all(engine)

class ApplicationModal(Modal):
    def __init__(self, user_mention):
        components = [
            TextInput(label="1. –í–∞—à –º–∞–π–±—É—Ç–Ω—ñ–π –Ω—ñ–∫–Ω–µ–π–º:", placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –º–∞–π–±—É—Ç–Ω—ñ–π –Ω—ñ–∫–Ω–µ–π–º", custom_id="name_input"),
            TextInput(label="2. –í–∞—à –≤—ñ–∫:", placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à —Ä–µ–∞–ª—å–Ω–∏–π –≤—ñ–∫", custom_id="age_input"),
            TextInput(label="3. –Ø–∫ –¥–∞–≤–Ω–æ –í–∏ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ —Å–µ—Ä–≤–µ—Ä—É?", placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å", custom_id="reason_input"),
            TextInput(label="4. –í–∏ –ø–ª–∞–Ω—É—î—Ç–µ –≥—Ä–∞—Ç–∏ –∑ –¥—Ä—É–∑—è–º–∏ —á–∏ –ø–æ–æ–¥–∏–Ω—Ü—ñ?", placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å", custom_id="friend_input", required=False)
        ]
        super().__init__(title="–ó–∞—è–≤–∫–∞ —É –≤–∞–π—Ç-–ª–∏—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞ TEST SERVER", components=components)
        self.user_mention = user_mention
    
    async def callback(self, inter: disnake.ModalInteraction):
        name = inter.text_values["name_input"]
        age = inter.text_values["age_input"]
        reason = inter.text_values["reason_input"]
        friend = inter.text_values["friend_input"]

        await inter.response.send_message(
            "–ß–∏ –æ–∑–Ω–∞–π–æ–º–ª–µ–Ω—ñ –í–∏ –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Å–µ—Ä–≤–µ—Ä—É?",
            view=RulesButtonView(name, age, reason, friend, inter.author.id, self.user_mention),
            ephemeral=True
        )

class RulesButtonView(View):
    def __init__(self, name, age, reason, friend, user_id, user_mention):
        super().__init__(timeout=None)
        self.name = name
        self.age = age
        self.reason = reason
        self.friend = friend
        self.user_id = user_id
        self.user_mention = user_mention

        button_yes = Button(label="–¢–∞–∫", style=disnake.ButtonStyle.primary, custom_id="rules_yes")
        button_no = Button(label="–ù—ñ", style=disnake.ButtonStyle.danger, custom_id="rules_no")

        button_yes.callback = self.button_callback
        button_no.callback = self.button_callback

        self.add_item(button_yes)
        self.add_item(button_no)

    async def button_callback(self, button_inter: disnake.MessageInteraction):
        rules_response = True if button_inter.component.label == "–¢–∞–∫" else False

        session = Session()
        application = Application(
            user_id=self.user_id,
            user_mention=self.user_mention,
            name=self.name,
            age=self.age,
            reason=self.reason,
            friend=self.friend,
            rules_response=rules_response
        )
        session.add(application)
        session.commit()
        session.close()

        await self.send_application(button_inter, "–¢–∞–∫" if rules_response else "–ù—ñ")

        for item in self.children:
            item.disabled = True
        await button_inter.response.edit_message(view=self)

    async def send_application(self, inter: disnake.MessageInteraction, rules_response: str):
        role_mention = inter.guild.get_role(ROLE_MENTION_ID).mention

        embed = disnake.Embed(title=" ", color=disnake.Color.green())
        embed.add_field(name="1. –ù—ñ–∫–Ω–µ–π–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", value=self.name, inline=False)
        embed.add_field(name=" ", value=" ", inline=False)
        embed.add_field(name="2. –í—ñ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", value=self.age, inline=False)
        embed.add_field(name=" ", value=" ", inline=False)
        embed.add_field(name="3. –Ø–∫ –¥–∞–≤–Ω–æ –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è(-–ª–∞—Å—è) –¥–æ —Å–µ—Ä–≤–µ—Ä—É:", value=self.reason, inline=False)
        embed.add_field(name=" ", value=" ", inline=False)
        embed.add_field(name="4. –ì—Ä–∞ –ø–æ–æ–¥–∏–Ω—Ü—ñ —á–∏ –¥—Ä—É–∑—è–º–∏?", value=self.friend, inline=False)
        embed.add_field(name=" ", value=" ", inline=False)
        embed.add_field(name="5. –ß–∏ –æ–∑–Ω–∞–π–æ–º–ª–µ–Ω–∏–π(-–Ω–∞) –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Å–µ—Ä–≤–µ—Ä—É?", value=rules_response, inline=False)
        
        channel = inter.guild.get_channel(RESPONSE_CHANNEL_ID)
        await channel.send(f"**{role_mention}, –Ω–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —É –≤–∞–π—Ç-–ª—ñ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞!**\n\n–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫(-—Ü—è): {self.user_mention}", embed=embed, view=ApprovalView(self.user_id))

class ApprovalView(View):
    def __init__(self, applicant_id):
        super().__init__(timeout=None)
        self.applicant_id = applicant_id
        button_approve = Button(label="–°—Ö–≤–∞–ª–∏—Ç–∏", style=disnake.ButtonStyle.success, custom_id="approve")
        button_reject = Button(label="–í—ñ–¥—Ö–∏–ª–∏—Ç–∏", style=disnake.ButtonStyle.danger, custom_id="reject")
        button_approve.callback = self.approve_callback
        button_reject.callback = self.reject_callback
        self.add_item(button_approve)
        self.add_item(button_reject)

    async def approve_callback(self, button_inter: disnake.MessageInteraction):
        session = Session()
        member = button_inter.guild.get_member(self.applicant_id)
        role = button_inter.guild.get_role(APPROVAL_ROLE_ID)

        if member:
            await member.add_roles(role)
            await member.send("**üôå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–∞–π—Ç-–ª–∏—Å—Ç –±—É–ª–∞ —Å—Ö–≤–∞–ª–µ–Ω–∞!**\n–î–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å –ø—Ä–∞–≤–∏–ª —Å–µ—Ä–≤–µ—Ä–∞ —Ç–∞ –±–∞–∂–∞—î–º–æ –í–∞–º –ø—Ä–∏—î–º–Ω–æ—ó –≥—Ä–∏!")
            await button_inter.response.send_message(f"‚ú® –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {button_inter.user.mention} **—Å—Ö–≤–∞–ª–∏–≤** –∑–∞—è–≤–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {member.mention}.", ephemeral=False)

            application = session.query(Application).filter_by(user_id=self.applicant_id, status=ApplicationStatus.pending).first()
            if application:
                application.status = ApplicationStatus.approved
                session.commit()
        else:
            await button_inter.response.send_message(f"**‚ùå –ü–æ–º–∏–ª–∫–∞**: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∏–¥–∞—á—ñ —Ä–æ–ª—ñ.", ephemeral=True)

        for item in self.children:
            item.disabled = True
        await button_inter.message.edit(view=self)
        session.close()

    async def reject_callback(self, button_inter: disnake.MessageInteraction):
        session = Session()
        member = button_inter.guild.get_member(self.applicant_id)

        if member:
            await member.send("**‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–∞–π—Ç-–ª–∏—Å—Ç –±—É–ª–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞.**\n–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∫—Ä–∞—Ñ—Ç–º–∞–π—Å—Ç–µ—Ä—ñ–≤ –∑–∞ –ø–æ–¥—Ä–æ–±–∏—Ü—è–º–∏ –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
            await button_inter.response.send_message(f"‚ùå –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {button_inter.user.mention} **–≤—ñ–¥—Ö–∏–ª–∏–≤** –∑–∞—è–≤–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {member.mention}.", ephemeral=False)

            application = session.query(Application).filter_by(user_id=self.applicant_id, status=ApplicationStatus.pending).first()
            if application:
                application.status = ApplicationStatus.rejected
                session.commit()
        else:
            await button_inter.response.send_message(f"**‚ùå –ü–æ–º–∏–ª–∫–∞**: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.", ephemeral=True)

        for item in self.children:
            item.disabled = True
        await button_inter.message.edit(view=self)
        session.close()

class ApplicationView(View):
    def __init__(self):
        super().__init__(timeout=None)
        button = Button(label="–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É", style=disnake.ButtonStyle.secondary)
        button.callback = self.apply_button_callback
        self.add_item(button)

    async def apply_button_callback(self, button_inter: disnake.MessageInteraction):
        user_id = button_inter.user.id
        session = Session()

        existing_application = session.query(Application).filter_by(user_id=user_id, status=ApplicationStatus.pending).first()
        if existing_application:
            await button_inter.response.send_message("**‚ùå –ü–æ–º–∏–ª–∫–∞**: –í–∞—à–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—è –∑–∞—è–≤–∫–∞ —â–µ –Ω–µ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ –ø–æ–∫–∏ —ó—ó —Ä–æ–∑–≥–ª—è–Ω—É—Ç—å.", ephemeral=True)
            session.close()
            return

        last_application = session.query(Application).filter_by(user_id=user_id).order_by(Application.timestamp.desc()).first()
        if last_application and (datetime.utcnow() - last_application.timestamp) < timedelta(minutes=10):
            await button_inter.response.send_message("**‚ùå –ü–æ–º–∏–ª–∫–∞**: –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –∑–∞—è–≤–∫—É –ª–∏—à–µ —Ä–∞–∑ –Ω–∞ 10 —Ö–≤–∏–ª–∏–Ω. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", ephemeral=True)
            session.close()
            return

        modal = ApplicationModal(button_inter.user.mention)
        await button_inter.response.send_modal(modal)
        session.close()

class ApplicationCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_ready(self):
        channel = self.bot.get_channel(APPLICATION_CHANNEL_ID)
        view = ApplicationView()
        
        async for message in channel.history(limit=100):
            if message.author == self.bot.user and message.embeds:
                embed = message.embeds[0]
                if (embed.title == "–ó–∞—è–≤–∫–∞ –Ω–∞ —Å–ª–æ—Ç —É –≤–∞–π—Ç-–ª–∏—Å—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞ TEST SERVER" and
                    "–í–∏ –º–∞—î—Ç–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø—Ä–æ–π—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—é —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é, —è–∫–∞ –Ω–∞–¥–∞—Å—Ç—å –¥–æ—Å—Ç—É–ø –¥–æ –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤ —Ç–∞ –¥–æ–¥–∞—Å—Ç—å –≤–∞—à –Ω—ñ–∫–Ω–µ–π–º –¥–æ –≤–∞–π—Ç-–ª—ñ—Å—Ç—É. \n–î–ª—è —Ç–æ–≥–æ, —â–æ–± –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É ‚Äì __–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ!__" in embed.description):
                    await message.edit(view=view)
                    return

        embed = disnake.Embed(
            title="–ó–∞—è–≤–∫–∞ –Ω–∞ —Å–ª–æ—Ç —É –≤–∞–π—Ç-–ª–∏—Å—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞ TEST SERVER", 
            description="–í–∏ –º–∞—î—Ç–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø—Ä–æ–π—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—é —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é, —è–∫–∞ –Ω–∞–¥–∞—Å—Ç—å –¥–æ—Å—Ç—É–ø –¥–æ –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤ —Ç–∞ –¥–æ–¥–∞—Å—Ç—å –≤–∞—à –Ω—ñ–∫–Ω–µ–π–º –¥–æ –≤–∞–π—Ç-–ª—ñ—Å—Ç—É. \n–î–ª—è —Ç–æ–≥–æ, —â–æ–± –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É ‚Äì __–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ!__", 
            color=0xF1F1F1
        )
        embed.add_field(name=" ", value=" ", inline=False)
        embed.add_field(name="**–ö—Ä–∏—Ç–µ—Ä—ñ—ó –¥–ª—è –≤—Å—Ç—É–ø—É:**", value="‚Ä¢ –ü–∞—á–∫–∞ —Å—É—Ö–∞—Ä–∏–∫—ñ–≤ –§–ª—ñ–Ω—Ç –∑—ñ —Å–º–∞–∫–æ–º —Å–º–µ—Ç–∞–Ω–∏ —Ç–∞ –∑–µ–ª–µ–Ω—ñ;\n‚Ä¢ 10+ lvl –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ –≤ –¥–∏—Å–∫–æ—Ä–¥—ñ.", inline=False)
        embed.set_image(url="https://cdn-media-1.freecodecamp.org/images/1*MirHqdGmQeG2kH_CuAkyow.jpeg")
        embed.set_footer(text='–ó –ø–æ–≤–∞–≥–æ—é, –∫—Ä–∞—Ñ—Ç–º–∞–π—Å—Ç–µ—Ä–∏ TEST SERVER ü§ç', icon_url=self.bot.user.avatar.url)
        await channel.send(embed=embed, view=view)

def setup(bot):
    print("Loading Application cog...")
    bot.add_cog(ApplicationCog(bot))
